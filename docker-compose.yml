name: sidepp-digital

volumes:
  db_data:
  uploads:
  data-uploads:
  data-extractions:

networks:
  sidepp_net:
    driver: bridge

services:
  # =========================
  # PostgreSQL Database
  # =========================
  db:
    image: postgres:16
    container_name: sidepp_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_DB: ${POSTGRES_DB:-aportes}
    ports:
      # Host 5434 -> Contenedor 5432 (tu setup actual)
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-aportes}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - sidepp_net
    restart: unless-stopped

  # ==========================================
  # App DEV (SvelteKit + Vite 5173)
  # ==========================================
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: sidepp_app_dev
    profiles: ["dev"]
    environment:
      NODE_ENV: development
      PORT: 5173
      HOST: 0.0.0.0
      ORIGIN: http://localhost:5173
      DATABASE_URL: ${DATABASE_URL_DOCKER}
      JWT_SECRET: ${JWT_SECRET}
      FILE_STORAGE_DIR: ${FILE_STORAGE_DIR}
      UPLOAD_DIR: ${UPLOAD_DIR}
      EXTRACTION_DIR: ${EXTRACTION_DIR}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5173:5173"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - uploads:/uploads
      - data-uploads:/data/uploads
      - data-extractions:/data/extractions
    networks:
      - sidepp_net
    restart: unless-stopped

  # ==========================================
  # App PROD (adapter-node a 3000)
  # ==========================================
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    container_name: sidepp_app_prod
    profiles: ["prod"]
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      ORIGIN: ${ORIGIN:-http://localhost:3000}
      DATABASE_URL: ${DATABASE_URL_DOCKER}
      JWT_SECRET: ${JWT_SECRET}
      FILE_STORAGE_DIR: ${FILE_STORAGE_DIR}
      UPLOAD_DIR: ${UPLOAD_DIR}
      EXTRACTION_DIR: ${EXTRACTION_DIR}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - uploads:/uploads
      - data-uploads:/data/uploads
      - data-extractions:/data/extractions
    networks:
      - sidepp_net
    restart: unless-stopped

  # ==========================
  # pgAdmin (UI DB)
  # ==========================
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: sidepp_pgadmin
    profiles: ["dev","prod"]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      # El contenedor escucha en 80, exponemos 5050 en host
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sidepp_net
    restart: unless-stopped
