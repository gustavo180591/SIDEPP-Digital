// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  // En contenedor: usa env("DATABASE_URL") con host db:5432
  // En tu host:    DATABASE_URL=postgresql://app:app@localhost:5433/aportes?schema=public
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* =========================
   ENTIDADES PRINCIPALES
   ========================= */

model Institution {
  id               String            @id @default(cuid())
  name             String
  cuit             String?           @unique
  address          String?
  city             String?
  state            String?
  country          String?           @default("Argentina")
  responsibleName  String?
  responsibleEmail String?

  members          Member[]
  periods          PayrollPeriod[]
  transfers        BankTransfer[]
  pdfFiles         PdfFile[]

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([name])
  @@index([cuit])
}

model Member {
  id                  String         @id @default(cuid())
  numeroOrden         String         @unique
  numeroMatricula     String         @unique
  firstName           String
  lastName            String
  institucionId       String?
  institucion         Institution?   @relation(fields: [institucionId], references: [id], onDelete: SetNull)
  documentoIdentidad  String         @unique
  nacionalidad        String         @default("Argentina")
  status              String         @default("active")
  email               String?        @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  postalCode          String?
  country             String?        @default("Argentina")
  membershipStartDate DateTime

  contributions       ContributionLine[]

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([lastName, firstName])
  @@index([institucionId])
}

model PayrollPeriod {
  id            String            @id @default(cuid())
  institutionId String
  institution   Institution       @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  /// Etiqueta legible (ej. "Noviembre 2024")
  label         String
  month         Int               // 1..12
  year          Int
  concept       String            // ej. "Aporte Sindical SIDEPP (1%)"

  // Totales globales del listado (si vinieron en PDF)
  peopleCount   Int?
  totalAmount   Decimal?          @db.Decimal(18, 2)

  lines         ContributionLine[]
  pdfFiles      PdfFile[]

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([institutionId, month, year, concept], name: "uq_period_institution_month_year_concept")
  @@index([institutionId, year, month])
}

model ContributionLine {
  id            String              @id @default(cuid())
  periodId      String
  period        PayrollPeriod       @relation(fields: [periodId], references: [id], onDelete: Cascade)

  memberId      String?
  member        Member?             @relation(fields: [memberId], references: [id], onDelete: SetNull)

  // Nombre tal como aparece en el PDF (útil para conciliación/fuzzy)
  rawName       String

  // Campos frecuentes en los listados SIDEPP
  quantity      Int?
  legajos       Int?
  conceptAmount Decimal?            @db.Decimal(18, 2)  // monto por concepto
  totalRem      Decimal?            @db.Decimal(18, 2)  // remuneración total / base

  status        ContributionStatus  @default(PENDING)

  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([periodId])
  @@index([memberId])
}

enum ContributionStatus {
  PENDING
  MATCHED
  MISSING
}

model BankTransfer {
  id             String        @id @default(cuid())
  institutionId  String
  institution    Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  datetime       DateTime
  reference      String?       // Nro. de Referencia
  operationNo    String?       // Nro. de Operación
  cbuDestino     String?
  cuentaOrigen   String?
  importe        Decimal       @db.Decimal(18, 2)
  cuitOrdenante  String?
  cuitBenef      String?
  titular        String?

  pdfFiles       PdfFile[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([institutionId, datetime])
  @@index([importe])
}

model PdfFile {
  id             String         @id @default(cuid())
  fileName       String
  kind           PdfKind
  storagePath    String         // ruta en filesystem o S3
  parsed         Boolean        @default(false)
  parseErrors    String?
  uploadedBy     String?

  institutionId  String?
  institution    Institution?   @relation(fields: [institutionId], references: [id], onDelete: SetNull)

  periodId       String?
  period         PayrollPeriod? @relation(fields: [periodId], references: [id], onDelete: SetNull)

  transferId     String?
  transfer       BankTransfer?  @relation(fields: [transferId], references: [id], onDelete: SetNull)

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([kind])
  @@index([institutionId])
  @@index([periodId])
  @@index([transferId])
}

enum PdfKind {
  LISTADO
  TRANSFER
}

/* =========================
   (Opcional) Usuarios del panel
   ========================= */

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  hash      String  // contraseña hasheada
  role      Role    @default(OPERATOR)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  OPERATOR
  VIEWER
}
