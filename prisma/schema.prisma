generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id               String          @id @default(cuid())
  name             String?
  cuit             String?         @unique
  address          String?
  city             String?
  state            String?
  country          String?         @default("Argentina")
  responsibleName  String?
  responsibleEmail String?
  responsablePhone String?
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?        @updatedAt
  members          Member[]
  users            User[]
  payrollPeriods   PayrollPeriod[]

  @@map("institutions")
}

model Member {
  id                  String             @id @default(cuid())
  numeroOrden         String?
  numeroMatricula     String?
  fullName            String?
  institucionId       String?
  documentoIdentidad  String?
  nacionalidad        String?             @default("Argentina")
  status              String?             @default("active")
  email               String?            @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  postalCode          String?
  country             String?            @default("Argentina")
  membershipStartDate DateTime?
  createdAt           DateTime?           @default(now())
  updatedAt           DateTime?           @updatedAt
  deletedAt           DateTime?
  contributions       ContributionLine[]
  institucion         Institution?       @relation(fields: [institucionId], references: [id])

  @@unique([documentoIdentidad, institucionId], name: "unique_documento_institution")
  @@map("members")
}

model PayrollPeriod {
  id            String             @id @default(cuid())
  institutionId String?
  month         Int?
  year          Int?
  concept       String?
  peopleCount   Int?
  totalAmount   Decimal?           @db.Decimal(18, 2)
  pdfFileId    String?            @unique
  transferId   String?
  createdAt     DateTime?           @default(now())
  updatedAt     DateTime?           @updatedAt
  institution   Institution?        @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  pdfFile      PdfFile?
  transfer     BankTransfer?     

  @@unique([institutionId, month, year, concept], name: "uq_period_institution_month_year_concept")
  @@map("payroll_periods")
}

model ContributionLine {
  id            String             @id @default(cuid())
  memberId      String?
  name          String?
  quantity      Int?
  conceptAmount Decimal?           @db.Decimal(18, 2)
  totalRem      Decimal?           @db.Decimal(18, 2)
  status        ContributionStatus @default(PENDING)
  pdfFileId     String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  member        Member?            @relation(fields: [memberId], references: [id])
  pdfFile       PdfFile?           @relation(fields: [pdfFileId], references: [id])

  @@map("contribution_lines")
}

model BankTransfer {
  id            String      @id @default(cuid())
  datetime      DateTime?
  reference     String?
  operationNo   String?
  cbuDestino    String?
  cuentaOrigen  String?
  importe       Decimal     @db.Decimal(18, 2)
  cuitOrdenante String?
  cuitBenef     String?
  titular       String?
  periodId      String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bufferHash    String?
  
  period        PayrollPeriod   @relation(fields: [periodId], references: [id])

  @@map("bank_transfers")
}

model PdfFile {
  id            String         @id @default(cuid())
  fileName      String
  periodId      String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bufferHash    String?        @unique
  type          PdfFileType?    
  
  contributionLine ContributionLine[]
  period        PayrollPeriod? @relation(fields: [periodId], references: [id])

  @@map("pdf_files")
}

enum PdfFileType {
  SUELDO
  FOPID
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  institutionId String?
  role          UserRole  @default(INTITUTION)
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  resetToken    String?   @unique
  resetExpires  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  institution   Institution? @relation(fields: [institutionId], references: [id])

  @@map("users")
}

enum ContributionStatus {
  PENDING
  MATCHED
  MISSING
}

enum UserRole {
  ADMIN
  OPERATOR
  INTITUTION
}
