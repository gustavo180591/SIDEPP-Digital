generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id             String   @id @default(cuid())
  userId         String
  token          String   @unique
  expiresAt      DateTime
  userAgent      String?
  ipAddress      String?
  lastActivityAt DateTime @default(now())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model Institution {
  id               String          @id @default(cuid())
  name             String
  cuit             String?         @unique
  address          String?
  city             String?
  state            String?
  country          String?         @default("Argentina")
  responsibleName  String?
  responsibleEmail String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  transfers        BankTransfer[]
  members          Member[]
  periods          PayrollPeriod[]
  pdfFiles         PdfFile[]

  @@index([name])
  @@index([cuit])
}

model Member {
  id                  String             @id @default(cuid())
  numeroOrden         String             @unique
  numeroMatricula     String             @unique
  firstName           String
  lastName            String
  institucionId       String?
  documentoIdentidad  String             @unique
  nacionalidad        String             @default("Argentina")
  status              String             @default("active")
  email               String?            @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  postalCode          String?
  country             String?            @default("Argentina")
  membershipStartDate DateTime
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  contributions       ContributionLine[]
  institucion         Institution?       @relation(fields: [institucionId], references: [id])

  @@index([lastName, firstName])
  @@index([institucionId])
}

model PayrollPeriod {
  id            String             @id @default(cuid())
  institutionId String
  /// Etiqueta legible (ej. "Noviembre 2024")
  label         String
  month         Int
  year          Int
  concept       String
  peopleCount   Int?
  totalAmount   Decimal?           @db.Decimal(18, 2)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  lines         ContributionLine[]
  institution   Institution        @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  pdfFiles      PdfFile[]

  @@unique([institutionId, month, year, concept], name: "uq_period_institution_month_year_concept")
  @@index([institutionId, year, month])
}

model ContributionLine {
  id            String             @id @default(cuid())
  periodId      String
  memberId      String?
  rawName       String
  quantity      Int?
  legajos       Int?
  conceptAmount Decimal?           @db.Decimal(18, 2)
  totalRem      Decimal?           @db.Decimal(18, 2)
  status        ContributionStatus @default(PENDING)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  member        Member?            @relation(fields: [memberId], references: [id])
  period        PayrollPeriod      @relation(fields: [periodId], references: [id], onDelete: Cascade)

  @@index([periodId])
  @@index([memberId])
}

model BankTransfer {
  id            String      @id @default(cuid())
  institutionId String
  datetime      DateTime
  reference     String?
  operationNo   String?
  cbuDestino    String?
  cuentaOrigen  String?
  importe       Decimal     @db.Decimal(18, 2)
  cuitOrdenante String?
  cuitBenef     String?
  titular       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  pdfFiles      PdfFile[]

  @@index([institutionId, datetime])
  @@index([importe])
}

model PdfFile {
  id            String         @id @default(cuid())
  fileName      String
  kind          PdfKind
  storagePath   String
  parsed        Boolean        @default(false)
  parseErrors   String?
  uploadedBy    String?
  institutionId String?
  periodId      String?
  transferId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  mimeType      String?
  size          Int?
  institution   Institution?   @relation(fields: [institutionId], references: [id])
  period        PayrollPeriod? @relation(fields: [periodId], references: [id])
  transfer      BankTransfer?  @relation(fields: [transferId], references: [id])

  @@index([kind])
  @@index([institutionId])
  @@index([periodId])
  @@index([transferId])
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  hash        String
  role        UserRole  @default(VIEWER)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sessions    Session[]

  @@index([email])
  @@map("users")
}

enum ContributionStatus {
  PENDING
  MATCHED
  MISSING
}

enum PdfKind {
  LISTADO
  TRANSFER
}

enum UserRole {
  ADMIN
  OPERATOR
  VIEWER
}
